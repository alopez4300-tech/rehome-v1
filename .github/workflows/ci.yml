name: CI

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  php:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, intl, pdo_sqlite
          coverage: none

      - name: Composer cache
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-interaction --no-progress --prefer-dist

      - name: App key + env
        run: |
          cp .env.ci .env
          php artisan key:generate

      - name: Block deprecated PHPUnit annotations
        run: |
          if grep -RIn "@test\|@covers\|@dataProvider\|@depends" tests/; then
            echo "Deprecated PHPUnit annotations detected. Use attributes." && exit 1
          fi

      - name: Static checks (Rector dry-run + Pint test)
        run: |
          composer rector
          composer pint

      - name: Run tests (strict)
        run: composer test

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint & Typecheck
        run: |
          npm run lint
          npm run typecheck

      - name: Build
        run: npm run build

  full-gate:
    needs: fast-gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: rehome
          MYSQL_USER: app
          MYSQL_PASSWORD: app
          MYSQL_ROOT_PASSWORD: root
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h localhost -p$MYSQL_ROOT_PASSWORD"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, intl, pdo_mysql, zip
          coverage: none

      - name: Install dependencies
        run: |
          cd backend && composer install --no-progress --prefer-dist
          cd ../frontend && npm ci

      - name: Backend - Full test suite
        run: |
          cd backend
          cp .env.example .env
          php artisan key:generate --no-interaction
          php artisan migrate --force
          php artisan db:seed --force
          composer run-script test

      - name: Streaming - Contract tests
        run: |
          cd backend
          echo "CACHE_STORE=redis" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "BROADCAST_DRIVER=reverb" >> .env
          echo "REVERB_APP_KEY=ci-test" >> .env
          vendor/bin/phpunit tests/Feature/Streaming/BroadcastContractTest.php --colors=always

      - name: Streaming - Infrastructure validation
        run: |
          cd backend
          redis-cli ping
          php artisan tinker --execute="cache()->put('ci-test', 'success', 60); echo 'Cache: ' . cache()->get('ci-test');"

      - name: Security audits
        run: |
          cd backend && composer audit --no-interaction || true
          cd ../frontend && npm audit --audit-level=high || true

      - name: Frontend - Component tests
        run: |
          cd frontend
          npm run test:component

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Frontend - E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Storybook - Build
        run: |
          cd frontend
          npm run build:storybook

      - name: Lighthouse CI
        run: |
          cd frontend
          npm run lhci || true
